
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> install.packages("TeenGrowth", repos = NULL, type = "source")
Installing package into '/home/k/kschaumberg/R_packages'
(as 'lib' is unspecified)
* installing *source* package 'TeenGrowth' ...
** using staged installation
** R
** data
*** moving datasets to lazyload DB
** byte-compile and prepare package for lazy loading
Failed to query server: Connection timed out
Warning in system("timedatectl", intern = TRUE) :
  running command 'timedatectl' had status 1
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
Failed to query server: Connection timed out
Warning in system("timedatectl", intern = TRUE) :
  running command 'timedatectl' had status 1
** testing if installed package can be loaded from final location
Failed to query server: Connection timed out
Warning in system("timedatectl", intern = TRUE) :
  running command 'timedatectl' had status 1
** testing if installed package keeps a record of temporary installation path
* DONE (TeenGrowth)
> 
> library(TeenGrowth)
Failed to query server: Connection timed out
Warning message:
In system("timedatectl", intern = TRUE) :
  running command 'timedatectl' had status 1
> library(dplyr)

Attaching package: 'dplyr'

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union

> 
> vectorized_bmiz_lookup <- Vectorize(bmiz_lookup, vectorize.args = c("bmi", "age", "sex"))
> vectorized_bmi_lookup <- Vectorize(bmi_lookup, vectorize.args = c("data_point", "age", "sex"))
> 
> load("Data/TeenGrowth_SimData_List_Split_Processed.RData")
> 
> # make forecast with population median data and add it to the sim data list
> for (sim_index in seq_along(TeenGrowth_SimData_List_Split)) {
+   forecast_data <-TeenGrowth_SimData_List_Split[[sim_index]]$forecasts
+   
+   # copy the first forecast and then add the population median data to it
+   forecast_data$pop_median <- forecast_data[[1]]
+   # name it population_median
+   forecast_data$pop_median$`.model` <- "pop_median"
+   forecast_data$pop_median <- forecast_data$pop_median |> 
+     mutate(eBMIz = 0, 
+            eBMI = median_bmi, 
+            lower_eBMI = median_bmi * 0.85, 
+            lower_eBMIz = vectorized_bmiz_lookup(bmi = lower_eBMI,
+                                                 age = forecast_data$pop_median$agemos,
+                                                 sex = forecast_data$pop_median$sex,
+                                                 age_unit = 'months'),
+            upper_eBMIz = 1, 
+            upper_eBMI = vectorized_bmi_lookup(data_point = upper_eBMIz,
+                                               age = forecast_data$pop_median$agemos,
+                                               sex = forecast_data$pop_median$sex,
+                                               age_unit = 'months'))
+   # add the population median forecast to the list
+   TeenGrowth_SimData_List_Split[[sim_index]]$forecasts$pop_median <- forecast_data$pop_median
+ }
> 
> 
> save(TeenGrowth_SimData_List_Split, file = "Data/TeenGrowth_SimData_List_Split_Processed.RData")
> 
> proc.time()
    user   system  elapsed 
3924.351   36.263 4095.786 
